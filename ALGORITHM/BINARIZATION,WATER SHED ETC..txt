#include<opencv2/core/core.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<opencv/cv.h>
#include<opencv2\opencv.hpp>
#include<opencv2\imgproc\imgproc.hpp>
#include<stdio.h>
#include<iostream>
using namespace std;
using namespace cv;
//#define EXPORT __declspec (dllexport)






class WatershedSegmenter{
private:
	cv::Mat markers;
public:
	void setMarkers(cv::Mat& markerImage)
	{
		markerImage.convertTo(markers, CV_32S);
	}

	cv::Mat process(cv::Mat &image)
	{
		cv::watershed(image, markers);
		markers.convertTo(markers, CV_8U);
		return markers;
	}
};


//void salt(cv::Mat &image, int n) 
//{
//	for (int k = 0; k<n; k++)
//{      // rand() is the MFC random number generator      
//		// try qrand() with Qt      
//	int i= rand()%image.cols;      
//		int j= rand()%image.rows;
//		if (image.channels() == 1) 
//		{ // gray-level image         
//			image.at<uchar>(j,i)= 255;       
//		} 
//		else if (image.channels() == 3)
//		{ // color image         
//			image.at<cv::Vec3b>(j,i)[0]= 30;          
//			image.at<cv::Vec3b>(j,i)[1]= 30;          
//			image.at<cv::Vec3b>(j,i)[2] = 30;
//		}   } } 
int main()
{
	// open the image   
	cv::Mat &image = cv::imread("cancer.jpg");// call function to add noise 

	//printf("Columns = %d \n", image.cols);
	//salt(image,3000); 
	// display image   
	
	cv::namedWindow("Image");
	cv::imshow("Image", image);


	//printf("Rows = %d \n", image.rows);



	cv::Mat &img = image;
	for (int y = 0; y < image.cols; y++)                                               //Binarization part
	{
		for (int x = 0; x < image.rows; x++)
		{
			// get pixel
			cv::Vec3b color = img.at<cv::Vec3b>(x, y);

			// ... do something to the color ....

			if (color[0]>1 && color[0] < 128 && color[1]>20 && color[2] > 210)
			{
				color[0] = 255;
				color[1] = 255;
				color[2] = 255;
				//cout << "Pixel >200 :" << x << "," << y << endl;
				//printf("%d \n", x);
			}

			else
			{
				color[0] = 0;
				color[1] = 0;
				color[2] = 0;
			}

			// set pixel
			img.at<cv::Vec3b>(x, y) = color;
		}
	}

	int x = img.rows*img.cols*img.channels();
	printf("%d \n", x);





	//if (image.empty()) { /* bark!!*/ }
	//cv::Mat roi = image(cvRect(385,270,image.cols,image.rows);
	//cv::Mat roi = image(cv::Range(0, 250), cv::Range(0, 350));            //Displaying the binarized image with specific region of interest
	//imshow("Example1", roi);



	cv::Mat binary;// = cv::imread(argv[2], 0);
	cv::cvtColor(image, binary, CV_BGR2GRAY);                                  //WATERSHEDDING ALGORITHM CODE STARS HERE
	imshow("originalbinary", binary);




	int count1 = 0, count2 = 0;
	for (int y = 0; y < binary.cols; y++)                                      //Counting the no. of black and white pixels in the binarized image
	{
		for (int x = 0; x < binary.rows; x++)
		{
			if (img.at<uchar>(x, y) == 0)
				count1++;
			else
				count2++;
		}
	}

	printf("%d %d \n", count1, count2);
	printf("%d \n", count1 + count2);


	// Eliminate noise and smaller objects
	cv::Mat fg;
	cv::erode(binary, fg, cv::Mat(), cv::Point(-1, -1), 2);
	imshow("fg", fg);


	// Identify image pixels without objects
	cv::Mat bg;
	cv::dilate(binary, bg, cv::Mat(), cv::Point(-1, -1), 3);
	cv::threshold(bg, bg, 1, 128, cv::THRESH_BINARY_INV);
	imshow("bg", bg);

	// Create markers image
	cv::Mat markers(binary.size(), CV_8U, cv::Scalar(0));
	markers = fg + bg;
	imshow("markers", markers);

	// Create watershed segmentation object
	WatershedSegmenter segmenter;
	segmenter.setMarkers(markers);

	cv::Mat result = segmenter.process(image);
	result.convertTo(result, CV_8U);
	imshow("final_result", result);                              //WATERSHEDDING ALGORITHM CODE ends here



	cv::Mat contours;                                            //EDGE DETECTION CODE
	cv::Canny(image, // gray-level image
		contours, // output contours
		125, // low threshold
		350);

	
	vector<vector<cv::Point>> contours1;                                       

	findContours(bg, contours1, RETR_EXTERNAL, CHAIN_APPROX_NONE);

	int x1 = contours1.size();                                                //Get the contours from the watershed image
	double largest_area = 0;
	//printf("%d \n", x1);
	for (int i = 0; i < x1; i++) // iterate through each contour. 
	{
		double a = contourArea(contours1[i], false);                         //calculate the area of the largest contour.

		if (a > largest_area){
			largest_area = a;

		}
	}

	printf("Largest area of contour=%lf", largest_area);                      //Print the area



		cvWaitKey(0);

	}

